#!/usr/bin/env python3

"""
TOOLS:
 - nmap
 - nikto
 - dirb
 - enum4linux
 """
 
import pyfiglet
import subprocess
import sys
import argparse

def run_nmap(target, timing, log_path):
    nmap_command = f"nmap -T{timing} -p- {target} -oN {log_path}/nmap_scan.txt"
    subprocess.run(nmap_command, shell=True)

def run_nikto(target, log_path):
    nikto_command = f"nikto -h {target} -o {log_path}/nikto_scan.txt"
    subprocess.run(nikto_command, shell=True)

def run_enum4linux(target, log_path):
    enum4linux_command = f"enum4linux {target} > {log_path}/enum4linux_scan.txt"
    subprocess.run(enum4linux_command, shell=True)

def run_dirb(target, log_path):
    dirb_command = f"dirb http://{target} -o {log_path}/dirb_scan.txt"
    subprocess.run(dirb_command, shell=True)

def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Tool to automate the beginning enumeration of a CTF-Challenge")
    parser.add_argument("-t", "--target", help="Set the target IP or hostname", required=True)
    parser.add_argument("-m", "--mode", type=int, choices=[0, 1, 2, 3, 4, 5], default=5, help="Choose the Timing Template in nmap (0-5)")
    parser.add_argument("-p", "--path", help="Set path for the logs", default=".")

    args = parser.parse_args()

    # Print banner
    ascii_banner = pyfiglet.figlet_format("PENTEST ENUM")
    print(ascii_banner)

    # Run tools
    run_nmap(args.target, args.mode, args.path)
    run_nikto(args.target, args.path)
    run_enum4linux(args.target, args.path)
    run_dirb(args.target, args.path)

if __name__ == "__main__":
    main()

