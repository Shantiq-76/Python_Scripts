#!/usr/bin/env python3

"""
Script for automating initial enumeration in bug bounty hunting.
"""

import pyfiglet
import subprocess
import argparse
import requests

# Defining constants for tools
TOOL_NMAP = "nmap"
TOOL_NIKTO = "nikto"
TOOL_ENUM4LINUX = "enum4linux"
TOOL_DIRB = "dirb"
TOOL_SUBLIST3R = "sublist3r"
TOOL_WPSCAN = "wpscan"

def is_wordpress(target):
    """
    Check if the target URL is a WordPress site.
    """
    response = requests.get(target)
    if "wp-content" in response.text:
        return True
    return False

def run_tool(tool, target, log_path):
    """
    Run the specified tool with the target and log path.
    """
    if tool == TOOL_NMAP:
        command = f"nmap -p- {target} -oN {log_path}/nmap_scan.txt"
    elif tool == TOOL_NIKTO:
        command = f"nikto -h {target} -o {log_path}/nikto_scan.txt"
    elif tool == TOOL_ENUM4LINUX:
        command = f"enum4linux {target} > {log_path}/enum4linux_scan.txt"
    elif tool == TOOL_DIRB:
        command = f"dirb http://{target} -o {log_path}/dirb_scan.txt"
    elif tool == TOOL_SUBLIST3R:
        command = f"sublist3r -d {target} -o {log_path}/sublist3r_scan.txt"
    elif tool == TOOL_WPSCAN:
        if is_wordpress(target):
            command = f"wpscan --url {target} --output {log_path}/wpscan_scan.txt"
        else:
            print("Target is not a WordPress site. Skipping WPScan.")
            return
    else:
        print(f"Unknown tool: {tool}")
        return

    subprocess.run(command, shell=True)

def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Script to automate initial enumeration in bug bounty hunting.")
    parser.add_argument("-t", "--target", help="Set the target IP or hostname", required=True)
    parser.add_argument("-p", "--path", help="Set path for the logs", default=".")
    parser.add_argument("-m", "--mode", type=int, choices=[0, 1, 2, 3, 4, 5], default=5, help="Choose the Timing Template in nmap (0-5)")
    parser.add_argument("-l", "--list-tools", action="store_true", help="List available tools")
    args = parser.parse_args()

    # Print banner
    ascii_banner = pyfiglet.figlet_format("PENTEST ENUM")
    print(ascii_banner)

    if args.list_tools:
        print("Available tools:")
        print("- " + "\n- ".join([TOOL_NMAP, TOOL_NIKTO, TOOL_ENUM4LINUX, TOOL_DIRB, TOOL_SUBLIST3R, TOOL_WPSCAN]))
        return

    # Run selected tools
    tools_to_run = [TOOL_NMAP, TOOL_NIKTO, TOOL_ENUM4LINUX, TOOL_DIRB, TOOL_SUBLIST3R, TOOL_WPSCAN]
    for tool in tools_to_run:
        run_tool(tool, args.target, args.path)

if __name__ == "__main__":
    main()
